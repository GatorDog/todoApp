(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}const n=function(n){return{title:n,desc:null,dueDate:function(n){e(1,arguments);var o=t(n);return o.setHours(0,0,0,0),o}(Date.now()),priority:null,notes:null,status:"not checked"}};let o=function(e){let t=function(e){return{title:e,desc:null}}("firstProject");return function(e){return{project:e,projectItems:[]}}(t)}();var c;o.projectItems.push(n("Popup Modal when plus button is clicked")),o.projectItems.push(n("new Project wiring")),o.projectItems.push(n("add Todo Button")),o.projectItems.push(n("project switching logic")),o.projectItems.push(n("css to split up each todo item, space them out further")),o.projectItems.push(n("Css to cross out when item is checked and completed")),console.log(o),o.projectItems.forEach((e=>console.log(e))),(c=o).projectItems.forEach((e=>{let t=document.createElement("input");t.type="checkbox",t.classList.add("checkListCheckbox");let n=document.createElement("li");n.innerHTML=e.title,n.classList.add("checkListItem");let o=document.createElement("input");o.type="date",o.classList.add("dueDate"),o.value=e.dueDate;let c=document.getElementById("todoList");c.appendChild(t),c.appendChild(n),c.appendChild(o)})),document.getElementById("projectList").innerHTML=c.project.title})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,