(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}const n=function(n){return{title:n,desc:null,dueDate:function(n){e(1,arguments);var o=t(n);return o.setHours(0,0,0,0),o}(Date.now()),priority:null,notes:null,status:"not checked"}},o=(()=>{const e=[];return{list:e,addProject:t=>{e.push(t)}}})();function s(e){let t=function(e){return{title:e,desc:null}}(e),n=function(e){return{project:e,projectItems:[]}}(t);return o.addProject(t),n}let c=s("firstProject");var r;s("secondProject"),s("thirdProject"),c.projectItems.push(n("Mobile layout support")),c.projectItems.push(n("Popup Modal when plus button is clicked")),c.projectItems.push(n("new Project wiring")),c.projectItems.push(n("add Todo Button")),c.projectItems.push(n("project switching logic")),c.projectItems.push(n("css to split up each todo item, space them out further")),c.projectItems.push(n("Css to cross out when item is checked and completed")),(r=c).projectItems.forEach((e=>{let t=document.createElement("input");t.type="checkbox",t.classList.add("checkListCheckbox");let n=document.createElement("li");n.innerHTML=e.title,n.classList.add("checkListItem");let o=document.createElement("input");o.type="date",o.classList.add("dueDate"),o.value=e.dueDate;let s=document.getElementById("todoList");s.appendChild(t),s.appendChild(n),s.appendChild(o)})),document.getElementById("projectList").innerHTML=r.project.title,function(){const e=document.getElementById("hamburgerMenu"),t=document.getElementById("projectDropdownList");e.addEventListener("click",(()=>{"block"===t.style.display?t.style.display="none":t.style.display="block"}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,